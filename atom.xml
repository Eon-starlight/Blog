<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://eon-starlight.github.io/Blog/</id>
    <title>Eon_Starlight&apos;s blog</title>
    <updated>2020-03-30T12:04:19.040Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://eon-starlight.github.io/Blog/"/>
    <link rel="self" href="https://eon-starlight.github.io/Blog/atom.xml"/>
    <subtitle>杀不死你的，终会使你更强大</subtitle>
    <logo>https://eon-starlight.github.io/Blog/images/avatar.png</logo>
    <icon>https://eon-starlight.github.io/Blog/favicon.ico</icon>
    <rights>All rights reserved 2020, Eon_Starlight&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[STL整合]]></title>
        <id>https://eon-starlight.github.io/Blog/stl-zheng-he/</id>
        <link href="https://eon-starlight.github.io/Blog/stl-zheng-he/">
        </link>
        <updated>2020-03-30T02:27:22.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h4 id="color-red-aaa"><a href="https://eon-starlight.github.io/Blog/stl-zhong-de-lessvectorgreaterbi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mi>a</mi><mi>a</mi><mi>a</mi></mstyle></mrow><annotation encoding="application/x-tex">\color {red} aaa</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="color:red;">a</span><span class="mord mathdefault" style="color:red;">a</span><span class="mord mathdefault" style="color:red;">a</span></span></span></span></a></h4>
</li>
<li>
<h4 id="colorredcolorboxwhiteset"><a href="https://eon-starlight.github.io/Blog/stl-zhong-de-lesssetgreaterbi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>set</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{set}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.21508em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9150799999999999em;"><span style="top:-2.91508em;"><span class="pstrut" style="height:3.21508em;"></span><span class="stretchy colorbox" style="color:red;height:1.21508em;background-color:white;"></span></span><span style="top:-3.21508em;"><span class="pstrut" style="height:3.21508em;"></span><span class="mord boxpad" style="color:red;"><span class="mord" style="color:red;">s</span><span class="mord" style="color:red;">e</span><span class="mord" style="color:red;">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
<li>
<h4 id="colorredcolorboxwhitequeue"><a href="https://eon-starlight.github.io/Blog/stl-zhong-de-lessqueuegreaterbi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>queue</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{queue}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.225em;vertical-align:-0.49444em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7305600000000001em;"><span style="top:-2.73056em;"><span class="pstrut" style="height:3.225em;"></span><span class="stretchy colorbox" style="color:red;height:1.225em;background-color:white;"></span></span><span style="top:-3.2250000000000005em;"><span class="pstrut" style="height:3.225em;"></span><span class="mord boxpad" style="color:red;"><span class="mord" style="color:red;">q</span><span class="mord" style="color:red;">u</span><span class="mord" style="color:red;">e</span><span class="mord" style="color:red;">u</span><span class="mord" style="color:red;">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49444em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
<li>
<h4 id="colorredcolorboxwhitestack"><a href="https://eon-starlight.github.io/Blog/stl-zhong-de-lessstackgreaterbi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>stack</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{stack}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2944399999999998em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9944399999999998em;"><span style="top:-2.99444em;"><span class="pstrut" style="height:3.29444em;"></span><span class="stretchy colorbox" style="color:red;height:1.2944399999999998em;background-color:white;"></span></span><span style="top:-3.29444em;"><span class="pstrut" style="height:3.29444em;"></span><span class="mord boxpad" style="color:red;"><span class="mord" style="color:red;">s</span><span class="mord" style="color:red;">t</span><span class="mord" style="color:red;">a</span><span class="mord" style="color:red;">c</span><span class="mord" style="color:red;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
<li>
<h4 id="colorredcolorboxwhitemap"><a href="https://eon-starlight.github.io/Blog/stl-zhong-de-lessmapgreaterbi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>map</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{map}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.225em;vertical-align:-0.49444em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7305600000000001em;"><span style="top:-2.73056em;"><span class="pstrut" style="height:3.225em;"></span><span class="stretchy colorbox" style="color:red;height:1.225em;background-color:white;"></span></span><span style="top:-3.2250000000000005em;"><span class="pstrut" style="height:3.225em;"></span><span class="mord boxpad" style="color:red;"><span class="mord" style="color:red;">m</span><span class="mord" style="color:red;">a</span><span class="mord" style="color:red;">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49444em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[高精度整合]]></title>
        <id>https://eon-starlight.github.io/Blog/gao-jing-du-zheng-he/</id>
        <link href="https://eon-starlight.github.io/Blog/gao-jing-du-zheng-he/">
        </link>
        <updated>2020-03-30T02:16:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="高精度代码综合讲解">高精度代码综合讲解</h1>
<ul>
<li>
<h2 id="读入不解释">读入不解释</h2>
</li>
<li>
<h4 id="colorredcolorboxwhite读入"><a href="https://eon-starlight.github.io/Blog/gao-jing-du-du-ru-bi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>读入</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{读入}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833299999999999em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833299999999998em;"><span style="top:-2.98333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="stretchy colorbox" style="color:red;height:1.2833299999999999em;background-color:white;"></span></span><span style="top:-3.28333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="mord boxpad" style="color:red;"><span class="mord cjk_fallback" style="color:red;">读</span><span class="mord cjk_fallback" style="color:red;">入</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
<li>
<h2 id="四则运算">四则运算</h2>
</li>
<li>
<h4 id="colorredcolorboxwhite高精度加法"><a href="https://eon-starlight.github.io/Blog/gao-jing-du-ji-ben-jia-fa-bi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>高精度加法</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{高精度加法}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833299999999999em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833299999999998em;"><span style="top:-2.98333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="stretchy colorbox" style="color:red;height:1.2833299999999999em;background-color:white;"></span></span><span style="top:-3.28333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="mord boxpad" style="color:red;"><span class="mord cjk_fallback" style="color:red;">高</span><span class="mord cjk_fallback" style="color:red;">精</span><span class="mord cjk_fallback" style="color:red;">度</span><span class="mord cjk_fallback" style="color:red;">加</span><span class="mord cjk_fallback" style="color:red;">法</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
<li>
<h4 id="colorredcolorboxwhite高精度减法"><a href="https://eon-starlight.github.io/Blog/gao-jing-du-ji-ben-jian-fa-bi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>高精度减法</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{高精度减法}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833299999999999em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833299999999998em;"><span style="top:-2.98333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="stretchy colorbox" style="color:red;height:1.2833299999999999em;background-color:white;"></span></span><span style="top:-3.28333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="mord boxpad" style="color:red;"><span class="mord cjk_fallback" style="color:red;">高</span><span class="mord cjk_fallback" style="color:red;">精</span><span class="mord cjk_fallback" style="color:red;">度</span><span class="mord cjk_fallback" style="color:red;">减</span><span class="mord cjk_fallback" style="color:red;">法</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
<li>
<h4 id="colorredcolorboxwhite高精度乘法"><a href="https://eon-starlight.github.io/Blog/gao-jing-du-ji-ben-cheng-fa-bi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>高精度乘法</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{高精度乘法}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833299999999999em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833299999999998em;"><span style="top:-2.98333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="stretchy colorbox" style="color:red;height:1.2833299999999999em;background-color:white;"></span></span><span style="top:-3.28333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="mord boxpad" style="color:red;"><span class="mord cjk_fallback" style="color:red;">高</span><span class="mord cjk_fallback" style="color:red;">精</span><span class="mord cjk_fallback" style="color:red;">度</span><span class="mord cjk_fallback" style="color:red;">乘</span><span class="mord cjk_fallback" style="color:red;">法</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
<li>
<h4 id="colorredcolorboxwhite高精度除法"><a href="https://eon-starlight.github.io/Blog/gao-jing-du-ji-ben-chu-fa-bi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>高精度除法</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{高精度除法}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833299999999999em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833299999999998em;"><span style="top:-2.98333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="stretchy colorbox" style="color:red;height:1.2833299999999999em;background-color:white;"></span></span><span style="top:-3.28333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="mord boxpad" style="color:red;"><span class="mord cjk_fallback" style="color:red;">高</span><span class="mord cjk_fallback" style="color:red;">精</span><span class="mord cjk_fallback" style="color:red;">度</span><span class="mord cjk_fallback" style="color:red;">除</span><span class="mord cjk_fallback" style="color:red;">法</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
</ul>
<h6 id="赠品大雾">赠品（大雾</h6>
<ul>
<li>
<h4 id="colorredcolorboxwhite高精度比较"><a href="https://eon-starlight.github.io/Blog/gao-jing-du-ji-ben-bi-jiao-bi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>高精度比较</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{高精度比较}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833299999999999em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833299999999998em;"><span style="top:-2.98333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="stretchy colorbox" style="color:red;height:1.2833299999999999em;background-color:white;"></span></span><span style="top:-3.28333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="mord boxpad" style="color:red;"><span class="mord cjk_fallback" style="color:red;">高</span><span class="mord cjk_fallback" style="color:red;">精</span><span class="mord cjk_fallback" style="color:red;">度</span><span class="mord cjk_fallback" style="color:red;">比</span><span class="mord cjk_fallback" style="color:red;">较</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
<li>
<h2 id="输出不解释">输出不解释</h2>
</li>
<li>
<h4 id="colorredcolorboxwhite输出"><a href="https://eon-starlight.github.io/Blog/gao-jing-du-shu-chu-bi-ji/"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><menclose mathbackground="white"><mtext>输出</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\colorbox{white}{输出}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833299999999999em;vertical-align:-0.3em;"></span><span class="mord" style="color:red;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833299999999998em;"><span style="top:-2.98333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="stretchy colorbox" style="color:red;height:1.2833299999999999em;background-color:white;"></span></span><span style="top:-3.28333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="mord boxpad" style="color:red;"><span class="mord cjk_fallback" style="color:red;">输</span><span class="mord cjk_fallback" style="color:red;">出</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></a></h4>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STL中的<queue>【笔记】]]></title>
        <id>https://eon-starlight.github.io/Blog/stl-zhong-de-lessqueuegreaterbi-ji/</id>
        <link href="https://eon-starlight.github.io/Blog/stl-zhong-de-lessqueuegreaterbi-ji/">
        </link>
        <updated>2020-03-30T01:08:57.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>头文件<queue>中主要包含两种容器：queue和priority_queue</li>
<li>
<h4 id="queue是什么">queue是什么？</h4>
<ul>
<li>一个队列，元素先入队，后出队（从头入队，从尾出队）</li>
</ul>
</li>
<li>
<h4 id="priority_queue是什么">priority_queue是什么？</h4>
<ul>
<li>一个大根二叉堆，插入堆就按照正常插入一个堆的方式，可以弹出堆顶元素</li>
</ul>
</li>
<li>
<h3 id="queue">queue</h3>
<ul>
<li>定义：</li>
</ul>
<pre><code class="language-cpp">queue&lt;int&gt;a
</code></pre>
<ul>
<li>数据类型仍然不限于int</li>
<li>a.push(x)
<ul>
<li>将元素x插入到队头。</li>
</ul>
</li>
<li>a.pop()
<ul>
<li>将队尾元素弹出。</li>
</ul>
</li>
<li>a.front()
<ul>
<li>返回队头元素。</li>
</ul>
</li>
<li>a.back()
<ul>
<li>返回队尾元素。</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="priority_queue">priority_queue</h3>
<ul>
<li>定义：<pre><code class="language-cpp">riority_queue&lt;int&gt;a;
</code></pre>
</li>
<li>a.push(x)
<ul>
<li>将元素x插入大根堆。</li>
</ul>
</li>
<li>a.pop()
<ul>
<li>删除堆顶元素。</li>
</ul>
</li>
<li>a.top()
<ul>
<li>返回堆顶元素。</li>
</ul>
</li>
<li>priority_queue实现小根堆
<ul>
<li>priority_queue实现小根二叉堆的方法有两种
<ol>
<li>将要插入的元素大小取反，然后插入，当使用时取出值在取反就可以用了</li>
</ol>
<ul>
<li>例如1、2、3，插入时取反：-1、-2、-3，使用时再取相反数就可以了</li>
</ul>
<ol start="2">
<li>建立自定义结构体类型，重载“小于号”，但是当做“大于号”来编写函数，例如：</li>
</ol>
<pre><code class="language-cpp">struct rec{int id;double value;};
bool operator &lt;(const rec &amp;a,const rec &amp;b)
{
    return a.value&gt;b.value                  
}
</code></pre>
<ul>
<li>这样priorit_queue就会认为大的更小，小的更大。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STL中的<stack>【笔记】]]></title>
        <id>https://eon-starlight.github.io/Blog/stl-zhong-de-lessstackgreaterbi-ji/</id>
        <link href="https://eon-starlight.github.io/Blog/stl-zhong-de-lessstackgreaterbi-ji/">
        </link>
        <updated>2020-03-30T01:08:38.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h4 id="stack栈是什么">stack（栈）是什么？</h4>
</li>
<li>可以把它想象为一个无限容量的一个桶，你只能使用拿出放入在桶的最顶端。</li>
<li>like this：</li>
</ul>
<pre><code>|___可使用元素___|
|____不可使用____|
|____不可使用____|
|____不可使用____|
</code></pre>
<ul>
<li>首先了解如何声明一个stack
<ul>
<li>头文件：</li>
</ul>
<pre><code class="language-cpp">#include&lt;stack&gt;
</code></pre>
<ul>
<li>声明：</li>
</ul>
<pre><code class="language-cpp">stack&lt;int&gt;a;
</code></pre>
<ul>
<li>数据结可以为任意类型。</li>
</ul>
</li>
<li>a.empty()/a.size()/a.clear()
<ul>
<li>功能与其他STL类似分别为判空、元素个数、清空。</li>
</ul>
</li>
<li>迭代器
<ul>
<li>栈并不支持迭代器，如果想进行遍历操作就不要使用栈。</li>
</ul>
</li>
<li>a.push(x)
<ul>
<li>将元素x放到stack a的顶端。</li>
</ul>
</li>
<li>a.pop()
<ul>
<li>将stack a的顶端元素弹出（删除）。</li>
</ul>
</li>
<li>a.top()
<ul>
<li>返回stack a的顶端元素（不删除）。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STL中的<map>【笔记】]]></title>
        <id>https://eon-starlight.github.io/Blog/stl-zhong-de-lessmapgreaterbi-ji/</id>
        <link href="https://eon-starlight.github.io/Blog/stl-zhong-de-lessmapgreaterbi-ji/">
        </link>
        <updated>2020-03-30T01:08:14.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h4 id="map是什么">map是什么？</h4>
</li>
<li>map是一个可以以自定义任意类型的下标及存储类型的数组。</li>
<li>实际上map容器是一个键值对key-value的映射。其内部实现是一棵一key为关键码的红黑树。map的key和value可以是任意类型。</li>
<li>声明：
<ul>
<li>头文件：</li>
</ul>
<pre><code class="language-cpp">#include&lt;map&gt;
</code></pre>
<ul>
<li>声明：</li>
</ul>
<pre><code>map&lt;string,int&gt;a;
</code></pre>
<ul>
<li>你甚至可以用vector来作为key或value：</li>
</ul>
<pre><code>map&lt; vector&lt;int&gt;,int&gt;b;
</code></pre>
</li>
<li>a.size()/a.empty()/a.claer()/a.begin()/a.end()
<ul>
<li>作用与<a href="https://www.luogu.com.cn/blog/yx20070829/stl-zhong-di-set-bi-ji-post">set</a>类似，依次为元素个数、判空、清空、首迭代器、尾迭代器。</li>
</ul>
</li>
<li>迭代器
<ul>
<li>与set相同，都是“双向访问迭代器”。对map的迭代器解除引用（即+&quot;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>&quot;）得到的是一对key、value。</li>
</ul>
</li>
<li>a.insert(make_pair(x,y))/a.erase(it)/a.erase(make_pair(x,y))
<ul>
<li>第一个函数将key x，value y，建立映射，这里补充一下，map可以当成数组使用：a[key]=value，所以这里赋值只需要：a[x]=y;两种方法效果一样</li>
<li>第二个函数将map a中it指向的pair删除。</li>
<li>第三个函数将map a中key为x，value为y的元素删除。</li>
</ul>
</li>
<li>a.find(x)
<ul>
<li>在map a里寻找key为x的pair（二元组），若找到就返回该pair的迭代器，否则返回a.end()</li>
</ul>
</li>
<li>PS：假如要使用a[x]的值，但之前并未赋值，这时a会自动建立一个以x为key的空value，接着返回，如果遇到大量这种情况就会浪费大量空间及时间，所以在引用之前建议先用a.find()函数寻找后再使用。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STL中的<set>【笔记】]]></title>
        <id>https://eon-starlight.github.io/Blog/stl-zhong-de-lesssetgreaterbi-ji/</id>
        <link href="https://eon-starlight.github.io/Blog/stl-zhong-de-lesssetgreaterbi-ji/">
        </link>
        <updated>2020-03-30T01:07:46.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>头文件<set>中主要包含两种容器：set和multiset</li>
<li>
<h4 id="set是什么">set是什么？</h4>
</li>
<li>一个有序不重复合集，即内部元素不能重合的无限容量数组，但它不像vector有时能当成一个数组使用。（能自动排序）</li>
<li>
<h4 id="multiset是什么">multiset是什么？</h4>
</li>
<li>一个有序可重复合集，即内部元素可以重合的无限容量数组。（同上）</li>
<li>
<h4 id="除元素可否重合之外函数功能基本相同就不分开说了">除元素可否重合之外函数功能基本相同，就不分开说了</h4>
</li>
<li>内部实现实际上是一个RBT（红黑树）</li>
<li>首先了解如何声明一个set/multiset
<ul>
<li>头文件：</li>
</ul>
<pre><code class="language-cpp">#include&lt;set&gt;
</code></pre>
<ul>
<li>声明：</li>
</ul>
<pre><code class="language-cpp">set&lt;int&gt;a;
multiset&lt;int&gt;b; 
</code></pre>
<ul>
<li>数据结构不限于int，与<a href="https://www.luogu.com.cn/blog/yx20070829/stl-zhong-di-vector-bi-ji-post">vector</a>一样。</li>
</ul>
</li>
<li>a.empty()/a.size()/a.clear()
<ul>
<li>功能与vector类似，具体见上面的链接。</li>
</ul>
</li>
<li>迭代器
<ul>
<li>在vector已经说过了定义，具体点链接去看，这里就直接讲用法了</li>
<li>set的迭代器是“双向迭代器”，它不像vector的支持随机访问，它不支持加一个数或减，或与迭代器相加减，它只支持++与--。++将它指向下一个元素，--将它指向上一个元素，使用时要注意是否越界。</li>
<li>如何声明迭代器：</li>
</ul>
<pre><code class="language-cpp">set&lt;int&gt;::iterator it;
</code></pre>
</li>
<li>a.begin()/a.end()
<ul>
<li>前者返回set里最小元素的迭代器（因为是有序的）。</li>
<li>后者返回set里最大元素下一个位置的迭代器，换言之，与vector相同“前闭后开”，因此*a.end()就是越界访问，而--a.end就是set里面最大元素的迭代器。</li>
<li>遍历方法（只有一种，不像vector有两种）：</li>
</ul>
<pre><code class="language-cpp">for(set&lt;int&gt;::iterator it=a.begin();it!=a.end();it++)printf(&quot;%d &quot;,*it);
</code></pre>
</li>
<li>a.inert(x)
<ul>
<li>将元素x插入到set a里面</li>
<li>在set中如果有重复元素就不会再次插入</li>
</ul>
</li>
<li>a.find(x);
<ul>
<li>再set a里面查找元素x，若找到则返回该元素的迭代器；若不存在则返回s.end()</li>
</ul>
</li>
<li>a.lower_bound(x)/a.upper_bound(x)
<ul>
<li>与a.find()功能类似，但是是有条件寻找</li>
<li>前者查找<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\ge x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>中最小的一个，并返回该元素迭代器。</li>
<li>后者查找<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">&gt; x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>中最小的一个，并返回该元素迭代器。</li>
</ul>
</li>
<li>a.erase(x)/a.eraser(it)
<ul>
<li>x为一个元素，则a.erase(x)从set a里面删除所有与x相等的元素。</li>
<li>it为一个迭代器，则a.erase(it)从set a里面删除it所指向的元素。</li>
</ul>
</li>
<li>a.count(x)
<ul>
<li>这个函数返回set a里面所有与x相等的元素个数。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STL中的<vector>【笔记】]]></title>
        <id>https://eon-starlight.github.io/Blog/stl-zhong-de-lessvectorgreaterbi-ji/</id>
        <link href="https://eon-starlight.github.io/Blog/stl-zhong-de-lessvectorgreaterbi-ji/">
        </link>
        <updated>2020-03-30T01:07:20.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h4 id="vector是什么">vector是什么？</h4>
</li>
<li>一个可以无限延长但只限于尾部插入弹出元素的任意数据类型的数组。</li>
<li>首先了解如何声明一个vector
<ul>
<li>头文件：</li>
</ul>
<pre><code class="language-cpp">#include&lt;vector&gt;
</code></pre>
<ul>
<li>声明：</li>
</ul>
<pre><code class="language-cpp">vector&lt;int&gt;a;
</code></pre>
</li>
<li>这时就开了一个叫'a'的vector存的是int形的变量，当然也可以改成string或long long以及其他数据类型甚至自己定义的结构体也是可以的。</li>
<li>接下来就是使用方法了。</li>
<li>a.size()/a.empty()所有的STL容器都支持
<ul>
<li>前者是返回vector的实际长度。</li>
<li>后者返回一个bool形，表示vector是否为空。</li>
</ul>
</li>
<li>a.clear()
<ul>
<li>清空vector</li>
</ul>
</li>
<li>迭代器
<ul>
<li>就像指针一样，用'<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>'解除引用</li>
<li>如何声明（这里的例子为保存int的vector的迭代器）：</li>
</ul>
<pre><code class="language-cpp">vector&lt;int&gt;::iterator it;
//it就是变量名，可以换
</code></pre>
<ul>
<li>如何使用？</li>
<li>vector的迭代器是“随机访问迭代器”，可以与一个整数相加或相减（类似于指针移动）；也可以另一个迭代器相加或相减（类似于指针相加减）。</li>
<li>表示迭代器指向的量就<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>it（就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>+迭代器名）</li>
<li>迭代器与指针的区别：
<ol>
<li>cout可以输出指针的值，但是迭代器进行该操作时会报错。因为迭代器返回的是对象引用而不是对象的值，所以cout只能输出迭代器使用&quot;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>&quot;解除引用而不能直接输出其自身。</li>
<li>指针能指向函数而迭代器不行，迭代器只能指向容器。</li>
</ol>
</li>
</ul>
</li>
<li>a.begin()/a.end()
<ul>
<li>前者返回vector内第一个元素的迭代器，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>a.begin()=a[0]</li>
<li>后者返回最后一个元素<strong>后边的边界</strong>的迭代器，注意不是返回最后一个元素的迭代器，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>a.end()=a[a.size()]，实际上是越界访问。</li>
<li>就在这里介绍一下两种遍历vector的方法
<ol>
<li>把vector变成数组使用（只有遍历时可用，插入元素不可以）、</li>
</ol>
<pre><code class="language-cpp">for(int i=0;i&lt;a.size();i++)printf(&quot;%d &quot;,a[i]);//注意不要越界
</code></pre>
<ol start="2">
<li>把vector变成数组使用（只有遍历时可用，插入元素不可以）、</li>
</ol>
<pre><code class="language-cpp">for(vector&lt;int&gt;::iterator it=a.begin();it!=a.end();it++)printf(&quot;%d &quot;,*it);
</code></pre>
</li>
</ul>
</li>
<li>a.front()/a.back()
<ul>
<li>前者返回vector的第一个元素（不是迭代器了），相当于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>a.begin/a[0]。</li>
<li>后者返回vector最后一个元素（不是边界了），相当于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>--a.end()和a[a.size()-1]。</li>
</ul>
</li>
<li>a.push_bac(x)k/a.pop_back()
<ul>
<li>前者把x插入到vector a的尾部。</li>
<li>后者将vector a的尾部元素弹掉（删除）</li>
</ul>
</li>
<li>vector在哪里会用到？
<ul>
<li>用vector可以代替邻接表存有向图。</li>
</ul>
<pre><code class="language-cpp">vector&lt;int&gt;ver[10001],edge[10001];
void add(int x,int y,int z)//保存从x到y权值为z的有向边
{
    vre[x].push_back(y);
    edge[x].push_back(z);
    return;
}
//遍历所有从x出发的点：
for(int i=0;i&lt;ver[x].size();i+++)int y=ver[x][i],z=edge[x][i];
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu（CF搬运）CF171G 【Mysterious numbers - 2】【题解】]]></title>
        <id>https://eon-starlight.github.io/Blog/luogucf-ban-yun-cf171g-mysterious-numbers-2-ti-jie/</id>
        <link href="https://eon-starlight.github.io/Blog/luogucf-ban-yun-cf171g-mysterious-numbers-2-ti-jie/">
        </link>
        <updated>2020-03-30T01:05:22.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF171G">题目链接</a></p>
<h4 id="这是一道简单的递推">这是一道简单的递推</h4>
<ul>
<li>题目中已经给出了递推式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>=</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">f_n=f_{n-1}+f_{n-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>简单的来说就是当前项为前两项之和</li>
<li>所以就只需要一个数组来进行递推：</li>
</ul>
<pre><code class="language-cpp">f[i]/*当前项*/=f[i-1]/*前一项*/+f[i-2]/*大前项*/;
</code></pre>
<ul>
<li>接着亮一下代码：</li>
</ul>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
int f[21],n;//数组开的刚刚好，要注意数据大小
int main()
{
	scanf(&quot;%d%d%d&quot;,&amp;f[0],&amp;f[1],&amp;n);//读入（注意是第零项和第一项）
	for(int i=2;i&lt;=n;i++)f[i]=f[i-1]+f[i-2];//for循环递推
	printf(&quot;%d&quot;,f[n]);//输出
	return 0;//拜拜
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu（CF搬运）CF411A 【Password Check】【题解】]]></title>
        <id>https://eon-starlight.github.io/Blog/luogucf-ban-yun-cf411a-password-check-ti-jie/</id>
        <link href="https://eon-starlight.github.io/Blog/luogucf-ban-yun-cf411a-password-check-ti-jie/">
        </link>
        <updated>2020-03-30T01:02:27.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF411A">题目链接</a></p>
<ul>
<li>
<h3 id="介绍一种题解里没有的方法突然在脑里生成的奇怪方法">介绍一种题解里没有的方法<s>突然在脑里生成的奇怪方法</s></h3>
</li>
<li>这需要用到字符串的强大find功能</li>
<li>加入a是一个字符串，a.find()（这里填你需要寻找的字符或字符串）</li>
<li>接着如果找到了就返回位置（最靠前的下标，从0开始）</li>
<li>反之没找到就返回-1</li>
<li>举例：</li>
</ul>
<pre><code class="language-cpp">string a=&quot;123&quot;;
int x=a.find('1'),y=a.find(&quot;23&quot;),z=a.find('4');
- 这时x的值为0，y为1，z为-1
- 接着我们需要用字符型变量做循环变量
- 就向这样：

```cpp
for(char i='1';i&lt;='9';i++)
</code></pre>
<ul>
<li>接下来就用介绍的功能完成这道题</li>
<li>首先设计个变量：</li>
</ul>
<pre><code class="language-cpp">string a;
bool x,y,z;
</code></pre>
<ul>
<li>a为读入变量，x判断是否有数字，y判断是否有小写字母，z判断是否有大写字母。</li>
<li>接着读入后，写三个循环分别查看是否有数字，小大写字母：</li>
</ul>
<pre><code class="language-cpp">for(char i='0';i&lt;='9';i++)//判断数字
    {
		if(a.find(i)!=-1)//发现就存起来
		{
			x=1;
			break;
		}
	}
	for(char i='a';i&lt;='z';i++)//判断小写字母
    {
		if(a.find(i)!=-1)//同上
		{
			y=1;
			break;
		}
	}
	for(char i='A';i&lt;='Z';i++)//大写字母
    {
		if(a.find(i)!=-1)//同
		{
			z=1;
			break;
		}
	}
</code></pre>
<ul>
<li>最后只要看xyz再输出就可以了</li>
<li>整体代码：</li>
</ul>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;cmath&gt;
#include&lt;algorithm&gt;
#include&lt;map&gt;
#include&lt;set&gt;
#include&lt;queue&gt;
#include&lt;deque&gt;
using namespace std;
string a;//设置变量
bool x,y,z;
int main()
{
	cin&gt;&gt;a;//读入（只能cin）
    for(char i='0';i&lt;='9';i++)//解释过的三个循环
    {
		if(a.find(i)!=-1)
		{
			x=1;
			break;
		}
	}
	for(char i='a';i&lt;='z';i++)
    {
		if(a.find(i)!=-1)
		{
			y=1;
			break;
		}
	}
	for(char i='A';i&lt;='Z';i++)
    {
		if(a.find(i)!=-1)
		{
			z=1;
			break;
		}
	}
	if(x&amp;&amp;y&amp;&amp;z&amp;&amp;a.length()&gt;=5/*字符串长度函数*/)printf(&quot;Correct&quot;);//如果条件成立
	else printf(&quot;Too weak&quot;);//否则
    return 0;
}
</code></pre>
<ul>
<li>
<h6 id="求赞">求赞</h6>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu（CF搬运）CF978A 【Remove Duplicates】【题解】]]></title>
        <id>https://eon-starlight.github.io/Blog/luogucf-ban-yun-cf978a-remove-duplicates-ti-jie/</id>
        <link href="https://eon-starlight.github.io/Blog/luogucf-ban-yun-cf978a-remove-duplicates-ti-jie/">
        </link>
        <updated>2020-03-30T01:00:53.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF978A">题目链接</a></p>
<ul>
<li>
<h3 id="介绍一种题解里没有的方法">介绍一种题解里没有的方法</h3>
</li>
<li>
<h6 id="博客食用更佳"><a href="https://www.luogu.com.cn/blog/yx20070829/solution-cf978a">博客食用更佳</a></h6>
</li>
<li>需要用到两个int型数组：w[51],s[1001]。</li>
<li>我们要干什么呢？</li>
<li>首先每读入一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 就更新w的值：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w[i]=a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>但因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 会重复，所以就会有多个w[i]指向一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>为了判断w[i]是否是最后一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 我们就要用到s数组</li>
<li>更新s的值：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>[</mo><msub><mi>a</mi><mi>i</mi></msub><mo>]</mo><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">s[a_i]=i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span></li>
<li>这样就保证 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>[</mo><msub><mi>a</mi><mi>i</mi></msub><mo>]</mo></mrow><annotation encoding="application/x-tex">s[a_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 读入的最后位置</li>
<li>当s[w[i]]=i，就有w[i]是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的最后读入位置，也就是说这个时候就可以输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 了</li>
<li>但是题目还要求出不重复数字的个数</li>
<li>我们就需要在读入时用到q数组来判断这个数是否出现过</li>
<li>
<h3 id="可能有点杂如果不懂边看代码边看注释">可能有点杂，如果不懂边看代码边看注释</h3>
</li>
</ul>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
using namespace std;
int n,a[51],s[1001],ans;//a数组就是w，ans是用于存个数的
bool q[1001];//判重数组
int main()
{
    scanf(&quot;%d&quot;,&amp;n);//读入n
    for(int i=1;i&lt;=n;i++)
    {
		int h;//就相当于a_i
		scanf(&quot;%d&quot;,&amp;h);
		a[i]=h;//更新a[i](w[i])
		s[h]=i;//更新s[h](s[a_i)
		if(q[h]==0)ans++;//没有重复ans++
		q[h]=1;//更新q
	}
	printf(&quot;%d\n&quot;,ans);//首先数出个数
	for(int i=1;i&lt;=n;i++)
	{
		if(s[a[i]]==i)printf(&quot;%d &quot;,a[i]);//如果映射成功说明这是a_i的最后位置，就可以输出了。
	}
    return 0;//程序拜拜
}
</code></pre>
]]></content>
    </entry>
</feed>